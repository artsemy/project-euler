package problems

import scala.annotation.tailrec

/*
  The sequence of triangle numbers is generated by adding the natural numbers. 
  So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
  1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
  Let us list the factors of the first seven triangle numbers:
   1: 1
   3: 1,3
   6: 1,2,3,6
  10: 1,2,5,10
  15: 1,3,5,15
  21: 1,3,7,21
  28: 1,2,4,7,14,28
  We can see that 28 is the first triangle number to have over five divisors.
  
  What is the value of the first triangle number to have over five hundred divisors?
  
  https://projecteuler.net/problem=12
*/

object P12_HighlyDivisibleTriangularNumber:

  def getAllDividers(n: Int): Seq[Int] =

    @tailrec
    def loop(i: Int, acc: Seq[Int]): Seq[Int] =
      if i == n then
        acc :+ i
      else if n % i == 0 then
        loop(i + 1, acc :+ i)
      else
        loop(i + 1, acc)

    loop(1, Seq())

  def isTriangular(n: Int): Boolean =
    val sqr = Math.sqrt(n * 2).toInt
    sqr * (sqr + 1) / 2 == n

  def isPrime(n: Int): Boolean =
    (2 until n).forall(n % _ != 0)

  def primeDividers(n: Int): Map[Int, Int] =

    @tailrec
    def degreeOfPrimeDivider(div: Int, number: Int = n, acc: Int = 0): Int =
      if number % div != 0 then
        acc
      else
        degreeOfPrimeDivider(div, number / div, acc + 1)

    @tailrec
    def loop(div: Int, acc: Map[Int, Int]): Map[Int, Int] =
      if div > n then
        acc
      else if n % div == 0 && isPrime(div) then
        loop(div + 1, acc + (div -> degreeOfPrimeDivider(div)))
      else
        loop(div + 1, acc)

    loop(2, Map())

  def countDividersNumber(n: Int): Int =
    getAllDividers(n).length

  def highlyDivisibleTriangularNumber(divNumber: Int): Long =

    @tailrec
    def loop(i: Int): Int =
      val tr = i * (i + 1) / 2
      if i > Math.sqrt(Int.MaxValue) then 
        -1
      else if countDividersNumber(tr) > divNumber then
        tr
      else
        loop(i + 1)

    loop(1)
