package problems

import scala.annotation.tailrec

/*
  Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be:

  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

  By considering the terms in the Fibonacci sequence whose values do not exceed four million,
  find the sum of the even-valued terms.

  https://projecteuler.net/problem=2
*/

object P02_EvenFibonacciNumbers:

  def countSumV1(upperBorder: Int): Int =

    @tailrec
    def fib(f1: Int, f2: Int, acc: List[Int]): List[Int] =
      if f2 >= upperBorder then
        acc.reverse
      else
        fib(f2, f1 + f2, f2 :: acc)

    def isEven(n: Int): Boolean = n % 2 == 0

    fib(0, 1, Nil).filter(isEven)
      .sum

  def countSumV2(upperBorder: Int): Int =

    @tailrec
    def fib(f1: Int, f2: Int, acc: List[Int]): List[Int] =
      if f1 + f2 >= upperBorder then
        acc.reverse
      else
        fib(f1 + 2 * f2, 2 * f1 + 3 * f2, (f1 + f2) :: acc)

    fib(1, 1, Nil).sum